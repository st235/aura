{
	"items": [
		{
			"id": 0,
			"title": "Bubble sort",
			"subtitle": "Comparison sort",
			"description": "Bubble sort algorithm starts by comparing the first two elements of an array and swapping if necessary, i.e., if you want to sort the elements of array in ascending order and if the first element is greater than second then, you need to swap the elements but, if the first element is smaller than second, you mustn't swap the element. Then, again second and third elements are compared and swapped if it is necessary and this process go on until last and second last element is compared and swapped. This completes the first step of bubble sort. If there are n elements to be sorted then, the process mentioned above should be repeated n-1 times to get required result. But, for better performance, in second step, last and second last elements are not compared becuase, the proper element is automatically placed at last after first step. Similarly, in third step, last and second last and second last and third last elements are not compared and so on. A figure is worth a thousand words so, acknowledge this figure for better understanding of bubble sort.",
			"code": {
				"data": "import java.util.Scanner;\r\n \r\nclass BubbleSort {\r\n  public static void main(String []args) {\r\n    int n, c, d, swap;\r\n    Scanner in = new Scanner(System.in);\r\n \r\n    System.out.println(\"Input number of integers to sort\");\r\n    n = in.nextInt();\r\n \r\n    int array[] = new int[n];\r\n \r\n    System.out.println(\"Enter \" + n + \" integers\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      array[c] = in.nextInt();\r\n   \r\n    for (c = 0; c < ( n - 1 ); c++) {\r\n      for (d = 0; d < n - c - 1; d++) {\r\n        if (array[d] > array[d+1]) \/* For descending order use < *\/\r\n        {\r\n          swap       = array[d];\r\n          array[d]   = array[d+1];\r\n          array[d+1] = swap;\r\n        }\r\n      }\r\n    }\r\n \r\n    System.out.println(\"Sorted list of numbers:\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      System.out.println(array[c]);\r\n  }\r\n}",
				"language": "Java"
			}
		},
		{
			"id": 1,
			"title": "Odd–even sort",
			"subtitle": "Comparison sort",
			"description": "On parallel processors, with one value per processor and only local left–right neighbor connections, the processors all concurrently do a compare–exchange operation with their neighbors, alternating between odd–even and even–odd pairings. This algorithm was originally presented, and shown to be efficient on such processors, by Habermann in 1972. The algorithm extends efficiently to the case of multiple items per processor. In the Baudet–Stevenson odd–even merge-splitting algorithm, each processor sorts its own sublist at each step, using any efficient sort algorithm, and then performs a merge splitting, or transposition–merge, operation with its neighbor, with neighbor pairing alternating between odd–even and even–odd on each step.",
			"code": {
				"data": "function oddEvenSort(list) {\r\n  function swap( list, i, j ){\r\n    var temp = list[i];\r\n    list[i] = list[j];\r\n    list[j] = temp;\r\n  }\r\n\r\n  var sorted = false;\r\n  while(!sorted)\r\n  {\r\n    sorted = true;\r\n    for(var i = 1; i < list.length-1; i += 2)\r\n    {\r\n      if(list[i] > list[i+1])\r\n      {\r\n        swap(list, i, i+1);\r\n        sorted = false;\r\n      }\r\n    }\r\n\r\n    for(var i = 0; i < list.length-1; i += 2)\r\n    {\r\n      if(list[i] > list[i+1])\r\n      {\r\n        swap(list, i, i+1);\r\n        sorted = false;\r\n      }\r\n    }\r\n  }\r\n}",
				"language": "JavaScript"
			}
		},
		{
			"id": 2,
			"title": "Quicksort",
			"subtitle": "Comparison sort",
			"description": "Bubble sort algorithm starts by comparing the first two elements of an array and swapping if necessary, i.e., if you want to sort the elements of array in ascending order and if the first element is greater than second then, you need to swap the elements but, if the first element is smaller than second, you mustn't swap the element. Then, again second and third elements are compared and swapped if it is necessary and this process go on until last and second last element is compared and swapped. This completes the first step of bubble sort. If there are n elements to be sorted then, the process mentioned above should be repeated n-1 times to get required result. But, for better performance, in second step, last and second last elements are not compared becuase, the proper element is automatically placed at last after first step. Similarly, in third step, last and second last and second last and third last elements are not compared and so on. A figure is worth a thousand words so, acknowledge this figure for better understanding of bubble sort.",
			"code": {
				"data": "import java.util.Scanner;\r\n \r\nclass BubbleSort {\r\n  public static void main(String []args) {\r\n    int n, c, d, swap;\r\n    Scanner in = new Scanner(System.in);\r\n \r\n    System.out.println(\"Input number of integers to sort\");\r\n    n = in.nextInt();\r\n \r\n    int array[] = new int[n];\r\n \r\n    System.out.println(\"Enter \" + n + \" integers\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      array[c] = in.nextInt();\r\n   \r\n    for (c = 0; c < ( n - 1 ); c++) {\r\n      for (d = 0; d < n - c - 1; d++) {\r\n        if (array[d] > array[d+1]) \/* For descending order use < *\/\r\n        {\r\n          swap       = array[d];\r\n          array[d]   = array[d+1];\r\n          array[d+1] = swap;\r\n        }\r\n      }\r\n    }\r\n \r\n    System.out.println(\"Sorted list of numbers:\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      System.out.println(array[c]);\r\n  }\r\n}",
				"language": "Java"
			}
		},
		{
			"id": 3,
			"title": "Heapsort",
			"subtitle": "Comparison sort",
			"description": "Bubble sort algorithm starts by comparing the first two elements of an array and swapping if necessary, i.e., if you want to sort the elements of array in ascending order and if the first element is greater than second then, you need to swap the elements but, if the first element is smaller than second, you mustn't swap the element. Then, again second and third elements are compared and swapped if it is necessary and this process go on until last and second last element is compared and swapped. This completes the first step of bubble sort. If there are n elements to be sorted then, the process mentioned above should be repeated n-1 times to get required result. But, for better performance, in second step, last and second last elements are not compared becuase, the proper element is automatically placed at last after first step. Similarly, in third step, last and second last and second last and third last elements are not compared and so on. A figure is worth a thousand words so, acknowledge this figure for better understanding of bubble sort.",
			"code": {
				"data": "import java.util.Scanner;\r\n \r\nclass BubbleSort {\r\n  public static void main(String []args) {\r\n    int n, c, d, swap;\r\n    Scanner in = new Scanner(System.in);\r\n \r\n    System.out.println(\"Input number of integers to sort\");\r\n    n = in.nextInt();\r\n \r\n    int array[] = new int[n];\r\n \r\n    System.out.println(\"Enter \" + n + \" integers\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      array[c] = in.nextInt();\r\n   \r\n    for (c = 0; c < ( n - 1 ); c++) {\r\n      for (d = 0; d < n - c - 1; d++) {\r\n        if (array[d] > array[d+1]) \/* For descending order use < *\/\r\n        {\r\n          swap       = array[d];\r\n          array[d]   = array[d+1];\r\n          array[d+1] = swap;\r\n        }\r\n      }\r\n    }\r\n \r\n    System.out.println(\"Sorted list of numbers:\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      System.out.println(array[c]);\r\n  }\r\n}",
				"language": "Java"
			}
		},
		{
			"id": 4,
			"title": "Shellsort",
			"subtitle": "Comparison sort",
			"description": "Bubble sort algorithm starts by comparing the first two elements of an array and swapping if necessary, i.e., if you want to sort the elements of array in ascending order and if the first element is greater than second then, you need to swap the elements but, if the first element is smaller than second, you mustn't swap the element. Then, again second and third elements are compared and swapped if it is necessary and this process go on until last and second last element is compared and swapped. This completes the first step of bubble sort. If there are n elements to be sorted then, the process mentioned above should be repeated n-1 times to get required result. But, for better performance, in second step, last and second last elements are not compared becuase, the proper element is automatically placed at last after first step. Similarly, in third step, last and second last and second last and third last elements are not compared and so on. A figure is worth a thousand words so, acknowledge this figure for better understanding of bubble sort.",
			"code": {
				"data": "import java.util.Scanner;\r\n \r\nclass BubbleSort {\r\n  public static void main(String []args) {\r\n    int n, c, d, swap;\r\n    Scanner in = new Scanner(System.in);\r\n \r\n    System.out.println(\"Input number of integers to sort\");\r\n    n = in.nextInt();\r\n \r\n    int array[] = new int[n];\r\n \r\n    System.out.println(\"Enter \" + n + \" integers\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      array[c] = in.nextInt();\r\n   \r\n    for (c = 0; c < ( n - 1 ); c++) {\r\n      for (d = 0; d < n - c - 1; d++) {\r\n        if (array[d] > array[d+1]) \/* For descending order use < *\/\r\n        {\r\n          swap       = array[d];\r\n          array[d]   = array[d+1];\r\n          array[d+1] = swap;\r\n        }\r\n      }\r\n    }\r\n \r\n    System.out.println(\"Sorted list of numbers:\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      System.out.println(array[c]);\r\n  }\r\n}",
				"language": "Java"
			}
		},
		{
			"id": 5,
			"title": "Merge sort",
			"subtitle": "Comparison sort",
			"description": "Bubble sort algorithm starts by comparing the first two elements of an array and swapping if necessary, i.e., if you want to sort the elements of array in ascending order and if the first element is greater than second then, you need to swap the elements but, if the first element is smaller than second, you mustn't swap the element. Then, again second and third elements are compared and swapped if it is necessary and this process go on until last and second last element is compared and swapped. This completes the first step of bubble sort. If there are n elements to be sorted then, the process mentioned above should be repeated n-1 times to get required result. But, for better performance, in second step, last and second last elements are not compared becuase, the proper element is automatically placed at last after first step. Similarly, in third step, last and second last and second last and third last elements are not compared and so on. A figure is worth a thousand words so, acknowledge this figure for better understanding of bubble sort.",
			"code": {
				"data": "import java.util.Scanner;\r\n \r\nclass BubbleSort {\r\n  public static void main(String []args) {\r\n    int n, c, d, swap;\r\n    Scanner in = new Scanner(System.in);\r\n \r\n    System.out.println(\"Input number of integers to sort\");\r\n    n = in.nextInt();\r\n \r\n    int array[] = new int[n];\r\n \r\n    System.out.println(\"Enter \" + n + \" integers\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      array[c] = in.nextInt();\r\n   \r\n    for (c = 0; c < ( n - 1 ); c++) {\r\n      for (d = 0; d < n - c - 1; d++) {\r\n        if (array[d] > array[d+1]) \/* For descending order use < *\/\r\n        {\r\n          swap       = array[d];\r\n          array[d]   = array[d+1];\r\n          array[d+1] = swap;\r\n        }\r\n      }\r\n    }\r\n \r\n    System.out.println(\"Sorted list of numbers:\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      System.out.println(array[c]);\r\n  }\r\n}",
				"language": "Java"
			}
		},
		{
			"id": 6,
			"title": "Introsort",
			"subtitle": "Comparison sort",
			"description": "Bubble sort algorithm starts by comparing the first two elements of an array and swapping if necessary, i.e., if you want to sort the elements of array in ascending order and if the first element is greater than second then, you need to swap the elements but, if the first element is smaller than second, you mustn't swap the element. Then, again second and third elements are compared and swapped if it is necessary and this process go on until last and second last element is compared and swapped. This completes the first step of bubble sort. If there are n elements to be sorted then, the process mentioned above should be repeated n-1 times to get required result. But, for better performance, in second step, last and second last elements are not compared becuase, the proper element is automatically placed at last after first step. Similarly, in third step, last and second last and second last and third last elements are not compared and so on. A figure is worth a thousand words so, acknowledge this figure for better understanding of bubble sort.",
			"code": {
				"data": "import java.util.Scanner;\r\n \r\nclass BubbleSort {\r\n  public static void main(String []args) {\r\n    int n, c, d, swap;\r\n    Scanner in = new Scanner(System.in);\r\n \r\n    System.out.println(\"Input number of integers to sort\");\r\n    n = in.nextInt();\r\n \r\n    int array[] = new int[n];\r\n \r\n    System.out.println(\"Enter \" + n + \" integers\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      array[c] = in.nextInt();\r\n   \r\n    for (c = 0; c < ( n - 1 ); c++) {\r\n      for (d = 0; d < n - c - 1; d++) {\r\n        if (array[d] > array[d+1]) \/* For descending order use < *\/\r\n        {\r\n          swap       = array[d];\r\n          array[d]   = array[d+1];\r\n          array[d+1] = swap;\r\n        }\r\n      }\r\n    }\r\n \r\n    System.out.println(\"Sorted list of numbers:\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      System.out.println(array[c]);\r\n  }\r\n}",
				"language": "Java"
			}
		},
		{
			"id": 7,
			"title": "nsertion sort",
			"subtitle": "Comparison sort",
			"description": "Bubble sort algorithm starts by comparing the first two elements of an array and swapping if necessary, i.e., if you want to sort the elements of array in ascending order and if the first element is greater than second then, you need to swap the elements but, if the first element is smaller than second, you mustn't swap the element. Then, again second and third elements are compared and swapped if it is necessary and this process go on until last and second last element is compared and swapped. This completes the first step of bubble sort. If there are n elements to be sorted then, the process mentioned above should be repeated n-1 times to get required result. But, for better performance, in second step, last and second last elements are not compared becuase, the proper element is automatically placed at last after first step. Similarly, in third step, last and second last and second last and third last elements are not compared and so on. A figure is worth a thousand words so, acknowledge this figure for better understanding of bubble sort.",
			"code": {
				"data": "import java.util.Scanner;\r\n \r\nclass BubbleSort {\r\n  public static void main(String []args) {\r\n    int n, c, d, swap;\r\n    Scanner in = new Scanner(System.in);\r\n \r\n    System.out.println(\"Input number of integers to sort\");\r\n    n = in.nextInt();\r\n \r\n    int array[] = new int[n];\r\n \r\n    System.out.println(\"Enter \" + n + \" integers\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      array[c] = in.nextInt();\r\n   \r\n    for (c = 0; c < ( n - 1 ); c++) {\r\n      for (d = 0; d < n - c - 1; d++) {\r\n        if (array[d] > array[d+1]) \/* For descending order use < *\/\r\n        {\r\n          swap       = array[d];\r\n          array[d]   = array[d+1];\r\n          array[d+1] = swap;\r\n        }\r\n      }\r\n    }\r\n \r\n    System.out.println(\"Sorted list of numbers:\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      System.out.println(array[c]);\r\n  }\r\n}",
				"language": "Java"
			}
		},
		{
			"id": 8,
			"title": "Selection sort",
			"subtitle": "Comparison sort",
			"description": "Bubble sort algorithm starts by comparing the first two elements of an array and swapping if necessary, i.e., if you want to sort the elements of array in ascending order and if the first element is greater than second then, you need to swap the elements but, if the first element is smaller than second, you mustn't swap the element. Then, again second and third elements are compared and swapped if it is necessary and this process go on until last and second last element is compared and swapped. This completes the first step of bubble sort. If there are n elements to be sorted then, the process mentioned above should be repeated n-1 times to get required result. But, for better performance, in second step, last and second last elements are not compared becuase, the proper element is automatically placed at last after first step. Similarly, in third step, last and second last and second last and third last elements are not compared and so on. A figure is worth a thousand words so, acknowledge this figure for better understanding of bubble sort.",
			"code": {
				"data": "import java.util.Scanner;\r\n \r\nclass BubbleSort {\r\n  public static void main(String []args) {\r\n    int n, c, d, swap;\r\n    Scanner in = new Scanner(System.in);\r\n \r\n    System.out.println(\"Input number of integers to sort\");\r\n    n = in.nextInt();\r\n \r\n    int array[] = new int[n];\r\n \r\n    System.out.println(\"Enter \" + n + \" integers\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      array[c] = in.nextInt();\r\n   \r\n    for (c = 0; c < ( n - 1 ); c++) {\r\n      for (d = 0; d < n - c - 1; d++) {\r\n        if (array[d] > array[d+1]) \/* For descending order use < *\/\r\n        {\r\n          swap       = array[d];\r\n          array[d]   = array[d+1];\r\n          array[d+1] = swap;\r\n        }\r\n      }\r\n    }\r\n \r\n    System.out.println(\"Sorted list of numbers:\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      System.out.println(array[c]);\r\n  }\r\n}",
				"language": "Java"
			}
		},
		{
			"id": 9,
			"title": "Cocktail shaker sort",
			"subtitle": "Comparison sort",
			"description": "Bubble sort algorithm starts by comparing the first two elements of an array and swapping if necessary, i.e., if you want to sort the elements of array in ascending order and if the first element is greater than second then, you need to swap the elements but, if the first element is smaller than second, you mustn't swap the element. Then, again second and third elements are compared and swapped if it is necessary and this process go on until last and second last element is compared and swapped. This completes the first step of bubble sort. If there are n elements to be sorted then, the process mentioned above should be repeated n-1 times to get required result. But, for better performance, in second step, last and second last elements are not compared becuase, the proper element is automatically placed at last after first step. Similarly, in third step, last and second last and second last and third last elements are not compared and so on. A figure is worth a thousand words so, acknowledge this figure for better understanding of bubble sort.",
			"code": {
				"data": "import java.util.Scanner;\r\n \r\nclass BubbleSort {\r\n  public static void main(String []args) {\r\n    int n, c, d, swap;\r\n    Scanner in = new Scanner(System.in);\r\n \r\n    System.out.println(\"Input number of integers to sort\");\r\n    n = in.nextInt();\r\n \r\n    int array[] = new int[n];\r\n \r\n    System.out.println(\"Enter \" + n + \" integers\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      array[c] = in.nextInt();\r\n   \r\n    for (c = 0; c < ( n - 1 ); c++) {\r\n      for (d = 0; d < n - c - 1; d++) {\r\n        if (array[d] > array[d+1]) \/* For descending order use < *\/\r\n        {\r\n          swap       = array[d];\r\n          array[d]   = array[d+1];\r\n          array[d+1] = swap;\r\n        }\r\n      }\r\n    }\r\n \r\n    System.out.println(\"Sorted list of numbers:\");\r\n \r\n    for (c = 0; c < n; c++)\r\n      System.out.println(array[c]);\r\n  }\r\n}",
				"language": "Java"
			}
		}
	]
}
